/* tslint:disable */
/* eslint-disable */
/**
 * Tribufu API
 * REST API to access Tribufu services.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: contact@tribufu.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    tag?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    type?: number;
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    privacy?: number;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    ownerId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Group
     */
    verified?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    photoUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    bannerUrl?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    memberCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    followerCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    viewCount?: number;
    /**
     * 
     * @type {Date}
     * @memberof Group
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Group
     */
    updated?: Date | null;
}

/**
 * Check if a given object implements the Group interface.
 */
export function instanceOfGroup(value: object): value is Group {
    return true;
}

export function GroupFromJSON(json: any): Group {
    return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Group {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'name': json['name'] == null ? undefined : json['name'],
        'tag': json['tag'] == null ? undefined : json['tag'],
        'description': json['description'] == null ? undefined : json['description'],
        'type': json['type'] == null ? undefined : json['type'],
        'privacy': json['privacy'] == null ? undefined : json['privacy'],
        'ownerId': json['owner_id'] == null ? undefined : json['owner_id'],
        'verified': json['verified'] == null ? undefined : json['verified'],
        'photoUrl': json['photo_url'] == null ? undefined : json['photo_url'],
        'bannerUrl': json['banner_url'] == null ? undefined : json['banner_url'],
        'memberCount': json['member_count'] == null ? undefined : json['member_count'],
        'followerCount': json['follower_count'] == null ? undefined : json['follower_count'],
        'viewCount': json['view_count'] == null ? undefined : json['view_count'],
        'created': json['created'] == null ? undefined : (new Date(json['created'])),
        'updated': json['updated'] == null ? undefined : (new Date(json['updated'])),
    };
}

export function GroupToJSON(json: any): Group {
    return GroupToJSONTyped(json, false);
}

export function GroupToJSONTyped(value?: Group | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'uuid': value['uuid'],
        'name': value['name'],
        'tag': value['tag'],
        'description': value['description'],
        'type': value['type'],
        'privacy': value['privacy'],
        'owner_id': value['ownerId'],
        'verified': value['verified'],
        'photo_url': value['photoUrl'],
        'banner_url': value['bannerUrl'],
        'member_count': value['memberCount'],
        'follower_count': value['followerCount'],
        'view_count': value['viewCount'],
        'created': value['created'] == null ? undefined : ((value['created']).toISOString()),
        'updated': value['updated'] == null ? undefined : ((value['updated'] as any).toISOString()),
    };
}

