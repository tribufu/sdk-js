/* tslint:disable */
/* eslint-disable */
/**
 * Tribufu API
 * REST API to access Tribufu services.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: contact@tribufu.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GroupRank } from './GroupRank';
import {
    GroupRankFromJSON,
    GroupRankFromJSONTyped,
    GroupRankToJSON,
    GroupRankToJSONTyped,
} from './GroupRank';

/**
 * 
 * @export
 * @interface ProfileGroup
 */
export interface ProfileGroup {
    /**
     * 
     * @type {string}
     * @memberof ProfileGroup
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileGroup
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileGroup
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProfileGroup
     */
    tag?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProfileGroup
     */
    privacy?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileGroup
     */
    verified?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProfileGroup
     */
    photoUrl?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProfileGroup
     */
    memberCount?: number;
    /**
     * 
     * @type {GroupRank}
     * @memberof ProfileGroup
     */
    rank?: GroupRank;
    /**
     * 
     * @type {Date}
     * @memberof ProfileGroup
     */
    since?: Date;
}



/**
 * Check if a given object implements the ProfileGroup interface.
 */
export function instanceOfProfileGroup(value: object): value is ProfileGroup {
    return true;
}

export function ProfileGroupFromJSON(json: any): ProfileGroup {
    return ProfileGroupFromJSONTyped(json, false);
}

export function ProfileGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileGroup {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'name': json['name'] == null ? undefined : json['name'],
        'tag': json['tag'] == null ? undefined : json['tag'],
        'privacy': json['privacy'] == null ? undefined : json['privacy'],
        'verified': json['verified'] == null ? undefined : json['verified'],
        'photoUrl': json['photo_url'] == null ? undefined : json['photo_url'],
        'memberCount': json['member_count'] == null ? undefined : json['member_count'],
        'rank': json['rank'] == null ? undefined : GroupRankFromJSON(json['rank']),
        'since': json['since'] == null ? undefined : (new Date(json['since'])),
    };
}

export function ProfileGroupToJSON(json: any): ProfileGroup {
    return ProfileGroupToJSONTyped(json, false);
}

export function ProfileGroupToJSONTyped(value?: ProfileGroup | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'uuid': value['uuid'],
        'name': value['name'],
        'tag': value['tag'],
        'privacy': value['privacy'],
        'verified': value['verified'],
        'photo_url': value['photoUrl'],
        'member_count': value['memberCount'],
        'rank': GroupRankToJSON(value['rank']),
        'since': value['since'] == null ? undefined : ((value['since']).toISOString()),
    };
}

